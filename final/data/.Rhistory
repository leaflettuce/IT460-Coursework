knitr::opts_chunk$set(echo = TRUE)
df <- data(AirPassangers)
data(AirPassangers)
data(AirPassengers)
class(AirPassangers)
?AirPAssangers
df <- decompose(AirPassengers)
View(df)
df <- read.csv(AirPassengers)
df <- AirPassengers
(df)
class(df)
df
frequency(df)
print(frequency(df))
summary(df)
print(frequency(df))
print(summary(df))
plot(df)
plot(df)
abline(reg=lm(df~time(df)))
knitr::opts_chunk$set(echo = TRUE)
#Andrew Trick, 5/18/2018
cycle(AirPassengers)
plot(aggregate(AirPassengers,FUN=mean))
cycle(AirPassengers)
plot(aggregate(AirPassengers,FUN=mean))
boxplot(AirPassengers~cycle(AirPassengers))
adf.test(diff(log(df)), alternative="stationary", k=0)
install.packages('adf')
adf.test(df)
install.packages('adf.test')
install.packages('tseries')
library('tseries')
adf.test(diff(log(df)), alternative="stationary", k=0)
adf.test(df)
sdt.test(df, alternative = "stationary", k = 0)
sdt.test(df, alternative = "stationary", k = 0)
adt.test(df, alternative = "stationary", k = 0)
adf.test(df, alternative = "stationary", k = 0)
#log is used to remove the growing variance in the series.
#Diff takes the difference of the series - to account for trend.
adf.test(diff(log(df)), alternative="stationary", k=0)
acf(log(AirPassengers))
acf(log(df))
scf(df)
acf(df)
acf(log(df))
acf(df)
acf(log(df))
acf(df)
acf(log(df))
acf(df)
acf(diff(log(AirPassengers)))
acf(df)
acf(diff(log(AirPassengers)))
pacf(diff(log(AirPassengers)))
acf(diff(log(df)))
pacf(diff(log(df)))
acf(diff(log(df)))
pacf(diff(log(df)))
fit011 <- arima(log(df), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
fit012 <- arima(df), c(0,1,2), seasonal = list(order = c(0, 1, 2), period = 12))
fit012 <- arima(log(df), c(0,1,2), seasonal = list(order = c(0, 1, 2), period = 12))
pred011 <- predict(fit011, n.ahead = 10*12)
View(pred011)
ts.plot(AirPassengers,2.718^pred011$pred, log = "y", lty = c(1,3))
ts.plot(AirPassengers,2.718^pred011$pred, log = "y", lty = c(1,3))
pred012 <- predict(fit012, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred012$pred, log = "y", lty = c(1,3))
pred011 <- predict(fit011, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred011$pred, log = "y", lty = c(1,3))
pred012 <- predict(fit012, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred012$pred, log = "y", lty = c(1,3))
View(fit012)
View(fit012)
View(fit011)
View(fit012)
View(fit012)
fit011 <- arima(log(df), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
fit012 <- arima(log(df), c(0,1,2), seasonal = list(order = c(0, 1, 2), period = 12))
pred011 <- predict(fit011, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred011$pred, log = "y", lty = c(1,3))
pred012 <- predict(fit012, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred012$pred, log = "y", lty = c(1,3))
#and one more
fit112 <- arima(log(df), c(1, 1, 2), seasonal = list(order = c(1, 1, 2), period = 12))
pred112 <- predict(fit112, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred112$pred, log = "y", lty = c(1,3))
pred011 <- predict(fit011, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred011$pred, log = "y", lty = c(1,3))
pred012 <- predict(fit012, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred012$pred, log = "y", lty = c(1,3))
pred112 <- predict(fit112, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred112$pred, log = "y", lty = c(1,3))
save.image("D:/Projects/kaggle/time_series/working_files.RData")
load("D:/Projects/kaggle/time_series/.RData")
install.packages(RWeka)
install.packages("RWeka")
dim(mtcars)
library(RWeka)
library(datasets)
head(mtcars)
str(mtcars)
LinearRegression(mpg ~ ., data = mtcars)
linreg = LinearRegression(mpg ~ ., data = mtcars)
View(linreg)
View(linreg)
View(linreg)
rm(linreg)
step(lm(mpg ~ ., data = mtcars), trace = 0)
head(mtcars)
print(mtcars)
LinearRegression(mpg ~ ., data = mtcars)
LinearRegression(mpg ~ ., data = mtcars)
library(ggplot2)
ggplot(aes(x = mpg), data = mtcars) +
geom_histogram(binwidth = 1) +
ggtitle('MPG Histogram') +
xlab('MPG') +
ylab('Count')
ggplot(aes(x = mpg), data = mtcars) +
geom_histogram(binwidth = 5) +
ggtitle('MPG Histogram') +
xlab('MPG') +
ylab('Count')
ggplot(aes(x = mpg), data = mtcars) +
geom_histogram(binwidth = 2.5) +
ggtitle('MPG Histogram') +
xlab('MPG') +
ylab('Count')
ggplot(aes(x = am, y = mpg), data = mtcars) +
geom_boxplot() +
stat_smooth() +
ggtitle('Automatic v. Manual') +
ylab('MPG') +
xlab('Type')
# Boxplot of MPG to AM
ggplot(aes(x = mtcars.am == 0, y = mpg), data = mtcars) +
geom_boxplot() +
stat_smooth() +
ggtitle('Automatic v. Manual') +
ylab('MPG') +
xlab('Type')
mtcars
mtcars.am
mtcars$am
ggplot(aes(x = mtcars$am == 0, y = mpg), data = mtcars) +
geom_boxplot() +
ggtitle('Automatic v. Manual') +
ylab('MPG') +
xlab('Type')
# Boxplot of MPG to AM
ggplot(aes(x = mtcars$am == 0, y = mpg), data = mtcars) +
geom_boxplot() +
ggtitle('Automatic v. Manual') +
ylab('MPG') +
xlab('Manuel?')
ggplot(aes(x = mtcars$am == 1, y = mpg), data = mtcars) +
geom_boxplot() +
ggtitle('Automatic v. Manual') +
ylab('MPG') +
xlab('Automatic?')
ggplot(aes(x = weight, y = mpg), data = mtcars) +
geom_jitter(alpha = .15)  +
geom_point(stat = 'summary',
fun.y = 'mean') +
ggtitle('MPG by Weight') +
ylab('MPG') +
xlab('Weight') +
coord_flip()
head(mtcars)
ggplot(aes(x = wt, y = mpg), data = mtcars) +
geom_jitter(alpha = .15)  +
geom_point(stat = 'summary',
fun.y = 'mean') +
ggtitle('MPG by Weight') +
ylab('MPG') +
xlab('Weight') +
coord_flip()
ggplot(aes(x = qsec, y = mpg), data = mtcars) +
geom_jitter(alpha = .15)  +
geom_point(stat = 'summary',
fun.y = 'mean') +
ggtitle('MPG by Weight') +
ylab('MPG') +
xlab('qsec')
grid.arrange(p1, p2, ncols = 2)
library(grid)
p1 = ggplot(aes(x = wt, y = mpg), data = mtcars) +
geom_jitter(alpha = .15)  +
geom_point(stat = 'summary',
fun.y = 'mean') +
ggtitle('MPG by Weight') +
ylab('MPG') +
xlab('Weight')
p2 = ggplot(aes(x = qsec, y = mpg), data = mtcars) +
geom_jitter(alpha = .15)  +
geom_point(stat = 'summary',
fun.y = 'mean') +
ggtitle('MPG by Weight') +
ylab('MPG') +
xlab('qsec')
grid.arrange(p1, p2, ncols = 2)
library(gridExtra)
p1 = ggplot(aes(x = wt, y = mpg), data = mtcars) +
geom_jitter(alpha = .15)  +
geom_point(stat = 'summary',
fun.y = 'mean') +
ggtitle('MPG by Weight') +
ylab('MPG') +
xlab('Weight')
p2 = ggplot(aes(x = qsec, y = mpg), data = mtcars) +
geom_jitter(alpha = .15)  +
geom_point(stat = 'summary',
fun.y = 'mean') +
ggtitle('MPG by Weight') +
ylab('MPG') +
xlab('qsec')
grid.arrange(p1, p2, ncols = 2)
grid.arrange(p1, p2, ncols = 2)
grid.arrange(p1, p2, ncol = 2)
mtcars --help
?mtcars
LinearRegression(mpg ~ ., data = mtcars)
linreg_1 = LinearRegression(mpg ~ ., data = mtcars)
linreg_2 = step(lm(mpg ~ ., data = mtcars), trace = 0)
summary(linreg_1)
summary(linreg_2)
summary(linreg_2)
summary(linreg_1)
LinearRegression(mpg ~ ., data = mtcars)
step(lm(mpg ~ ., data = mtcars), trace = 0)
lm(mpg ~ ., data = mtcars)
library(RWeka)
library(datasets)
library(ggplot2)
library(grid)
library(gridExtra)
linreg_1 <- LinearRegression(mpg ~ ., data = mtcars)
linreg_2 <- step(lm(mpg ~ ., data = mtcars), trace = 0)
linreg_1 <- LinearRegression(mpg ~ ., data = mtcars)
linreg_2 <- step(lm(mpg ~ ., data = mtcars), trace = 0)
summary(linreg_1)
summary(linreg_2)
LinearRegression(mpg ~ ., data = mtcars)
step(lm(mpg ~ ., data = mtcars), trace = 0)
# IT460 - Week One Lab
# Andrew Trick
#
# Set up environment and run simple linear regression.
# imports
library(RWeka)
library(datasets)
library(ggplot2)
library(grid)
library(gridExtra)
# examine data
dim(mtcars)
str(mtcars)
head(mtcars)
# MODEL - linear reg
linreg_1 <- LinearRegression(mpg ~ ., data = mtcars)
linreg_2 <- step(lm(mpg ~ ., data = mtcars), trace = 0)
summary(linreg_1)
summary(linreg_2)
# EDA VISUALS
# Histo of MPG
ggplot(aes(x = mpg), data = mtcars) +
geom_histogram(binwidth = 2.5) +
ggtitle('MPG Histogram') +
xlab('MPG') +
ylab('Count')
# Scatters of MPG v. weight and qsec
p1 <- ggplot(aes(x = wt, y = mpg), data = mtcars) +
geom_jitter(alpha = .15)  +
geom_point(stat = 'summary',
fun.y = 'mean') +
ggtitle('MPG by Weight') +
ylab('MPG') +
xlab('Weight')
p2 <- ggplot(aes(x = qsec, y = mpg), data = mtcars) +
geom_jitter(alpha = .15)  +
geom_point(stat = 'summary',
fun.y = 'mean') +
ggtitle('MPG by qsec') +
ylab('MPG') +
xlab('qsec')
grid.arrange(p1, p2, ncol = 2)
# Boxplot of MPG to AM
ggplot(aes(x = mtcars$am == 1, y = mpg), data = mtcars) +
geom_boxplot() +
ggtitle('Automatic v. Manual') +
ylab('MPG') +
xlab('Manuel = True')
LinearRegression(mpg ~ ., data = mtcars)
step(lm(mpg ~ ., data = mtcars), trace = 0)
summary(mtcars)
mtcars
head(mtcars)
sum(mtcars)
summary(mtcars)
head(mtcars)
LinearRegression(mpg ~ ., data = mtcars)
library(RWeka)
LinearRegression(mpg ~ ., data = mtcars)
step(lm(mpg ~ ., data = mtcars), trace = 1)
# IT460 - Week One Lab
# Andrew Trick
#pa
# Set up environment and run simple linear regression.
# imports
library(RWeka)
library(datasets)
library(ggplot2)
library(grid)
library(gridExtra)
# examine data
dim(mtcars)
str(mtcars)
head(mtcars)
# MODEL - linear reg
linreg_1 <- LinearRegression(mpg ~ ., data = mtcars)
linreg_2 <- step(lm(mpg ~ ., data = mtcars), trace = 1)
summary(linreg_1)
summary(linreg_2)
# EDA VISUALS
# Histo of MPG
ggplot(aes(x = mpg), data = mtcars) +
geom_histogram(binwidth = 2.5) +
ggtitle('MPG Histogram') +
xlab('MPG') +
ylab('Count')
# Scatters of MPG v. weight and qsec
p1 <- ggplot(aes(x = wt, y = mpg), data = mtcars) +
geom_jitter(alpha = .15)  +
geom_point(stat = 'summary',
fun.y = 'mean') +
ggtitle('MPG by Weight') +
ylab('MPG') +
xlab('Weight')
p2 <- ggplot(aes(x = qsec, y = mpg), data = mtcars) +
geom_jitter(alpha = .15)  +
geom_point(stat = 'summary',
fun.y = 'mean') +
ggtitle('MPG by qsec') +
ylab('MPG') +
xlab('qsec')
grid.arrange(p1, p2, ncol = 2)
# Boxplot of MPG to AM
ggplot(aes(x = mtcars$am == 1, y = mpg), data = mtcars) +
geom_boxplot() +
ggtitle('Automatic v. Manual') +
ylab('MPG') +
xlab('Manuel = True')
library(corrplot)
cor <-cor(mtcars)
corrplot(corr, method="number")
corrplot(cor, method="number")
corrplot(cor, method="color")
corrplot(cor, method="number")
install.packages("rattle")
df <-library(rattle)
df <-library(rattle)
df <- data(audit)
attach(audit)
View(audit)
str(audit$Occupation)
hist(df$Occupation)
summary(df$Occupation)
hist(audit$Occupation)
summary(audit$Occupation)
?audit
setwd(e:/projects/it460/final/data)
setwd("e://projects/it460/final/data")
write_csv(audit)
write.csv(audit)
write.csv(audit, file = 'e://projects/it460/final/data/')
write.csv(audit, file = 'e://projects/it460/final/data')
write.csv(audit, file = 'e://projects/it460/final/data/audit.csv')
